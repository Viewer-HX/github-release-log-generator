import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import logging
from typing import Optional
from .config import Config
from datetime import datetime

logger = logging.getLogger(__name__)

class EmailService:
    """Email service for sending release log notifications"""
    
    def __init__(self):
        self.config = Config()
        self.smtp_host = self.config.SMTP_HOST
        self.smtp_port = self.config.SMTP_PORT
        self.username = self.config.SMTP_USERNAME
        self.password = self.config.SMTP_PASSWORD
        self.from_email = self.config.FROM_EMAIL
    
    def create_html_email(self, release_log: str, repository: str) -> str:
        """Convert markdown release log to HTML email format"""
        
        # Simple markdown to HTML conversion for basic formatting
        html_content = release_log.replace('\n', '<br>')
        html_content = html_content.replace('# ', '<h1>').replace('\n', '</h1>\n', 1)
        html_content = html_content.replace('## ', '<h2>').replace('<br>', '</h2><br>', html_content.count('## '))
        html_content = html_content.replace('### ', '<h3>').replace('<br>', '</h3><br>', html_content.count('### '))
        html_content = html_content.replace('- ', '<li>').replace('<br><li>', '</li><br><li>')
        html_content = html_content.replace('**', '<strong>').replace('**', '</strong>')
        html_content = html_content.replace('*', '<em>').replace('*', '</em>')
        
        # Wrap in HTML template
        html_template = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Release Log - {repository}</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: #f4f4f4;
                }}
                .container {{
                    background-color: white;
                    padding: 30px;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                h1 {{
                    color: #2c3e50;
                    border-bottom: 3px solid #3498db;
                    padding-bottom: 10px;
                }}
                h2 {{
                    color: #34495e;
                    margin-top: 25px;
                }}
                h3 {{
                    color: #7f8c8d;
                }}
                li {{
                    margin-bottom: 8px;
                }}
                .header {{
                    background-color: #3498db;
                    color: white;
                    padding: 20px;
                    margin: -30px -30px 30px -30px;
                    border-radius: 8px 8px 0 0;
                }}
                .footer {{
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #ecf0f1;
                    color: #7f8c8d;
                    font-size: 14px;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1 style="margin: 0; border: none; color: white;">Release Log Notification</h1>
                    <p style="margin: 10px 0 0 0;">Repository: {repository}</p>
                </div>
                
                <div class="content">
                    {html_content}
                </div>
                
                <div class="footer">
                    <p>This release log was automatically generated by the GitHub Release Log Generator.</p>
                    <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        return html_template
    
    def send_email(self, 
                   recipient_email: str, 
                   subject: str, 
                   release_log: str, 
                   repository: str) -> bool:
        """Send email with release log"""
        try:
            # Create message
            message = MIMEMultipart("alternative")
            message["Subject"] = subject
            message["From"] = self.from_email
            message["To"] = recipient_email
            
            # Create both plain text and HTML versions
            text_content = release_log
            html_content = self.create_html_email(release_log, repository)
            
            # Create MIMEText objects
            text_part = MIMEText(text_content, "plain")
            html_part = MIMEText(html_content, "html")
            
            # Add parts to message
            message.attach(text_part)
            message.attach(html_part)
            
            # Create secure connection and send email
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.username, self.password)
                server.sendmail(self.from_email, recipient_email, message.as_string())
            
            logger.info(f"Email sent successfully to {recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending email: {e}")
            return False
    
    def create_release_log_subject(self, repository: str, version: str = None) -> str:
        """Create email subject for release log"""
        if version:
            return f"ðŸš€ Release Log: {repository} v{version}"
        else:
            return f"ðŸ“‹ Release Log: {repository}"

# Global email service instance
email_service = EmailService()
